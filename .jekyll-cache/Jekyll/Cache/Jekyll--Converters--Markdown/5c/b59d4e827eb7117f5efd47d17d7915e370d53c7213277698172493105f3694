I"¥Ñ<p><img src="https://media.giphy.com/media/f9SgNsok0zsxI3vS56/giphy.gif" alt="Que es testing" /></p>

<p>Programar es escribir c√≥digo para resolver problemasüòé. La ingenier√≠a de software es la pr√°ctica de utilizar un proceso estructurado para resolver problemas.</p>

<p>Tener una base de c√≥digo que podamos cambiar, ampliar y refactorizar seg√∫n sea necesario.</p>

<p>Las pruebas aseguran que nuestro programa funciona seg√∫n lo previsto y que los cambios en la base de c√≥digo no rompen la funcionalidad existente.</p>

<p><img src="https://media.giphy.com/media/DUrdT2xEmJWbS/giphy.gif" alt="Que es testing" /></p>

<p>Se trata de ser pragm√°tico en lo que probamos, üòå <strong>c√≥mo lo hacemos y cu√°ndo lo hacemos</strong> debemos aprovechar las herramientas y t√©cnicas que nos permiten probar nuestro c√≥digo de la manera m√°s eficiente posible. Las pruebas deben ser f√°ciles y sin barreras</p>

<p>Tenemos que entrar en el c√≥digo porque no hay pruebas o las pruebas que existen son tan debiles que nos vemos obligados a reescribir las pruebas a medida que escribimos el c√≥digo. De esto no se trata la Ingenier√≠a del Software.</p>

<p>Las pruebas deber√≠an permitir la refactorizaci√≥n, no obstaculizar nuestra capacidad de realizar cambios en la base de c√≥digo. Deber√≠amos pasar nuestro tiempo escribiendo  üíª <strong>l√≥gica de negocios</strong>, no luchando con pruebas.</p>

<p>En mi experiencia parece que hay muchos consejos contradictorios, y eso es porque los hay. Las pruebas son dificiles, m√°s que cualquier otra disciplina de ingenier√≠a de software. con mis colegas siempre estamos discutiendo sobre üìù <strong>Qu√© evaluamos</strong>, <strong>c√≥mo evaluamos</strong> y <strong>cu√°ndo evaluamos</strong>.</p>

<p><code class="highlighter-rouge">Aqui escribo mi proceso de pensamiento sobre c√≥mo hago para agregar pruebas a una base de c√≥digo.</code></p>

<p>antes de esto hago un resumen de como funciona la cosa,para  que en lo posible hablemos el mismo lenguaje</p>

<h1 id="que-diablos-es-testing">QUE DIABLOS ES TESTING!</h1>

<p><img src="https://media.giphy.com/media/l49JD2nWqfZ7exBzW/giphy.gif" alt="Que es testing" /></p>

<p>Cuando escribimos c√≥digo, necesitamos ejecutarlo para asegurarnos de que est√° haciendo lo que esperamos.</p>

<blockquote>
  <p>Las pruebas son un contrato con nuestro c√≥digo: dado un valor, esperamos que se devuelva un determinado resultado.</p>
</blockquote>

<p>Las pruebas en ejecuci√≥n pueden considerarse como un mecanismo de retroalimentaci√≥n que nos informa si nuestro programa funciona seg√∫n lo previsto</p>

<p>no he escuchado a nadie decir</p>

<blockquote>
  <p>Escrib√≠ muchas pruebas, pero no vali√≥ la pena, as√≠ que las elimin√©,el programa funciona como pense.</p>
</blockquote>

<p>Si bien pasar las pruebas no puede probar los errores de ausencia, nos informan que nuestro c√≥digo funciona de la manera definida por la prueba. En contraste, una prueba fallida indica que algo no est√° bien. Necesitamos entender por qu√© nuestra prueba fall√≥ para poder modificar el c√≥digo y / o las pruebas, seg√∫n sea necesario.</p>

<blockquote>
  <p>üë® =&gt; <strong>Corro Test</strong> =&gt; ‚òëÔ∏è ok, ‚úñÔ∏èfalla
entonces <strong>resultado del proceso</strong> =&gt; üë® y de nuevo‚Ä¶</p>
</blockquote>

<p>Si bien pasar las pruebas no puede probar los errores de ausencia, nos informan que nuestro c√≥digo funciona de la manera definida por la prueba. En contraste, una prueba fallida indica que algo no est√° bien. Necesitamos entender por qu√© nuestra prueba fall√≥ para poder modificar el c√≥digo y / o las pruebas, seg√∫n sea necesario.</p>

<h3 id="propiedades-de-los-test">Propiedades de los test</h3>

<ul>
  <li>
    <p><strong>Rapido</strong>: Las pruebas nos dan la confianza de que nuestro c√≥digo funciona seg√∫n lo previsto. Un ciclo de retroalimentaci√≥n m√°s lento dificulta el desarrollo ya que nos lleva m√°s tiempo descubrir si nuestro cambio fue correcto. Si nuestro flujo de trabajo est√° plagado de pruebas lentas, no las ejecutaremos con tanta frecuencia. Esto conducir√° a problemas en el futuro.</p>
  </li>
  <li>
    <p><strong>Determinista:</strong> Las pruebas deben ser deterministas, es decir, la misma entrada siempre dar√° como resultado la misma salida. Si las pruebas no son deterministas, tenemos que encontrar una manera de explicar el comportamiento aleatorio dentro de nuestras pruebas. Si bien definitivamente hay un c√≥digo no determinista en producci√≥n (es decir, Machine learning o IA), debemos tratar de hacer que todo nuestro c√≥digo no probabil√≠stico sea lo m√°s determinista posible. No tiene sentido hacer trabajo adicional a menos que nuestro programa lo requiera.</p>
  </li>
  <li>
    <p><strong>Automatizado</strong> Podemos confirmar que nuestro programa funciona ejecut√°ndolo. Esto podr√≠a ejecutarse manualmente un comando en REPL o actualizar una p√°gina web; en ambos casos, estamos buscando ver si nuestro programa hace lo que se supone que debe hacer.</p>

    <p>Si bien las pruebas manuales est√°n bien para proyectos peque√±os, se vuelven inmanejables a medida que nuestro proyecto crece en complejidad. Al automatizar nuestro conjunto de pruebas, podemos verificar r√°pidamente que nuestro programa funciona a pedido.</p>
  </li>
</ul>

<h3 id="vocabulario-en-comun">Vocabulario en comun</h3>

<blockquote>
  <p>input &gt; System under Test <strong>(sut)</strong> &gt;  Output &gt; <strong>Salidas validas</strong> &gt;  ‚òëÔ∏è test ok, ‚úñÔ∏è test falla</p>
</blockquote>

<p>Un sistema bajo prueba (SUT) es la entidad que se est√° probando actualmente. Esto podr√≠a ser una l√≠nea de c√≥digo, un m√©todo o un programa completo.</p>

<p><strong>Los criterios de aceptaci√≥n</strong> se refieren a la verificaci√≥n que realizamos que nos permite aceptar la salida del sistema. La especificidad y el rango de los criterios de aceptaci√≥n dependen de lo que estamos probando: los dispositivos m√©dicos y el sector aeroespacial requieren que las pruebas sean espec√≠ficas, ya que hay mucho menos margen de error.</p>

<p>Si Amazon hace una mala recomendaci√≥n, no es el fin del mundo. Si Watson de IBM sugiere una cirug√≠a incorrecta, puede ser mortal.</p>

<p><strong>Las pruebas</strong> se refieren al proceso de ingresar entradas en nuestro sistema bajo prueba y validar las salidas seg√∫n nuestros criterios de aceptaci√≥n:</p>

<ul>
  <li>Si la salida est√° bien, nuestra prueba pasa.</li>
  <li>Si la salida no est√° bien, nuestra prueba falla y tenemos que depurar.</li>
</ul>

<blockquote>
  <p>Idenficar fallos temprano: 
<strong>Los errores cuestan dinero</strong>. <strong>üí∞</strong> <code class="highlighter-rouge">Cu√°nto</code> depende de cu√°ndo los encuentres.</p>
</blockquote>

<p>La correcci√≥n de errores se vuelve m√°s costosa cuanto m√°s se encuentre en el Ciclo de vida del desarrollo de software (SDLC). El verdadero costo de un error de software profundiza en este problema.</p>

<p>Mejorar el dise√±o del sistema</p>

<p>Este es un poco controvertido, pero creo que escribir c√≥digo teniendo en cuenta las pruebas mejora el dise√±o del sistema.</p>

<p>Un completo conjunto de pruebas muestra que el desarrollador realmente ha pensado en el problema con cierta profundidad. Escribir pruebas te obliga a usar tu propia API; Con suerte, esto da como resultado una mejor interfaz.</p>

<p>Todos los proyectos tienen limitaciones de tiempo y es bastante f√°cil acostumbrarse a tomar atajos que aumentan el acoplamiento entre m√≥dulos que conducen a interdependencias complejas. Tenemos que ser conscientes de resolver problemas con el c√≥digo de espagueti.</p>

<p>Saber que tenemos que probar nuestro c√≥digo nos obliga a escribir c√≥digo modular. Si algo es torpe para probar, podr√≠a haber una mejor interfaz que podamos implementar. Tomarse el tiempo para escribir ex√°menes nos obliga a estar atentos; respiramos profundamente antes de ver el problema desde la perspectiva de un usuario.</p>

<p>Una vez que escriba c√≥digo comprobable utilizando patrones como la inyecci√≥n de dependencias, ver√° c√≥mo agregar una estructura que hace m√°s f√°cil verificar que nuestro c√≥digo est√° haciendo lo que esperamos.</p>

<h3 id="black-box-contra-white-box">Black Box contra White Box</h3>

<p><img src="https://media.giphy.com/media/l2JegI3GShJoyHEwo/giphy.gif" alt="pyramid test" /></p>

<p>Las pruebas se pueden clasificar ampliamente en dos grandes categor√≠as: pruebas de Black Box y pruebas de White Box.</p>

<p><strong>Black Box Testing</strong>: se refiere a t√©cnicas de prueba en las que el tester no puede ver el funcionamiento interno del elemento que se est√° probando.</p>

<blockquote>
  <p>entrada &gt; üì¶ &gt; salida</p>
</blockquote>

<p><strong>White Box Testing</strong>: es la t√©cnica en la que el tester puede ver el funcionamiento interno del elemento que se est√° probando.</p>

<blockquote>
  <p>entrada &gt; üì§ &gt; salida</p>
</blockquote>

<p>Como desarrolladores, realizamos pruebas de White Box. Escribimos el c√≥digo dentro de la caja y sabemos c√≥mo probarlo a fondo. Esto no quiere decir que no sea necesario realizar pruebas de caja negra, a√∫n deber√≠amos hacer que alguien realice las pruebas a un nivel superior; <code class="highlighter-rouge">La proximidad al c√≥digo puede conducir a puntos ciegos en nuestras pruebas.</code></p>

<h3 id="piramide-de-prueba">Piramide de prueba</h3>

<p>La Pir√°mide de prueba no es una regla dif√≠cil y r√°pida, pero proporciona un buen lugar para comenzar a pensar en una estrategia de prueba. Una buena regla general es escribir tantas pruebas en cada nivel como sea necesario para tener confianza en su sistema. Deber√≠amos escribir pruebas a medida que escribimos c√≥digo, iterando hacia una estrategia de prueba que funcione para el proyecto en el que estamos trabajando</p>

<p><img src="https://media.giphy.com/media/J341kHWTGLqflpLcGb/giphy.gif" alt="pyramid test" /></p>

<p>La Pir√°mide de prueba no es una regla dif√≠cil y r√°pida, pero proporciona un buen lugar para comenzar a pensar en una estrategia de prueba.</p>

<p>Una buena regla general es escribir tantas pruebas en cada nivel como sea necesario para tener confianza en su sistema. Deber√≠amos escribir pruebas a medida que escribimos c√≥digo, iterando hacia una estrategia de prueba que funcione para el proyecto en el que estamos trabajando</p>

<h3 id="unit-test">UNIT test</h3>

<p>Las pruebas unitarias son pruebas de bajo nivel que se centran en probar una parte espec√≠fica de nuestro sistema. Son baratos de escribir y r√°pidos de ejecutar. Las fallas en las pruebas deben proporcionar suficiente informaci√≥n contextual para identificar la fuente del error. Los desarrolladores suelen escribir estas pruebas durante la fase de implementaci√≥n del Ciclo de vida del desarrollo de software (SDLC).</p>

<p>Las pruebas unitarias deben ser independientes y aisladas; interactuar con componentes externos aumenta tanto el alcance de nuestras pruebas como el tiempo que tardan en ejecutarse.  reemplazar las dependencias con dobles de prueba da como resultado pruebas deterministas que se ejecutan r√°pidamente.</p>

<p><strong>¬øQu√© tan grande debe ser nuestra prueba de unidad?</strong> Como todo lo dem√°s en programaci√≥n, <code class="highlighter-rouge">depende</code> de lo que estamos tratando de hacer. Pensar en t√©rminos de una unidad de comportamiento nos permite escribir pruebas alrededor de bloques l√≥gicos de c√≥digo.</p>

<p><strong>Test Pyramid</strong> recomienda realizar muchas pruebas unitarias en nuestro conjunto de pruebas. Estas pruebas nos dan la confianza de que nuestro programa funciona como se esperaba. Escribir un c√≥digo nuevo o modificar el c√≥digo existente puede requerir que reescribamos algunas de nuestras pruebas. Esta es una pr√°ctica est√°ndar, nuestro conjunto de pruebas crece con nuestra base de c√≥digo.</p>

<p>Intente ser consciente de que nuestro conjunto de pruebas crece en complejidad. Recuerde, el c√≥digo que prueba nuestro c√≥digo de producci√≥n tambi√©n <strong>es c√≥digo de producci√≥n.</strong> T√≥mese el tiempo para refactorizar sus pruebas para asegurarse de que sean <strong>eficientes y efectivas.</strong></p>

<p>vamos al codigo!</p>

<p>Supongamos que tenemos la siguiente funci√≥n que toma una lista de palabras y devuelve la palabra m√°s com√∫n y el n√∫mero de apariciones de esa palabra:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">buscar_palabra_principal</span><span class="p">(</span><span class="n">palabras</span><span class="p">)</span>
    <span class="c1"># Devuelve las palabras y ocurrencias m√°s comunes
</span>    <span class="n">contador_palabras</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">palabras</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">contador_palabras</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<p>Podemos probar esta funci√≥n creando una lista, ejecutando la funci√≥n <code class="highlighter-rouge">buscar_palabra_principal</code> sobre esa lista y comparando los resultados de la funci√≥n con el valor que esperamos:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">buscar_palabra_principal</span><span class="p">():</span>
    <span class="n">palabras</span> <span class="o">=</span> <span class="p">[</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"bat"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">]</span>
    <span class="n">resultado</span> <span class="o">=</span> <span class="n">buscar_palabra_principal</span><span class="p">(</span><span class="n">palabras</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"foo"</span>
    <span class="k">assert</span> <span class="n">resultado</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span> 
</code></pre></div></div>
<p>Si alguna vez quisimos cambiar la implementaci√≥n de <code class="highlighter-rouge">buscar_palabra_principal</code>, podemos hacerlo sin temor. Nuestra prueba asegura que la funcionalidad de <code class="highlighter-rouge">buscar_palabra_principal</code> no puede cambiar sin causar una falla en la prueba.</p>

<h3 id="test-de-integracion">Test de integracion</h3>

<p><img src="https://media.giphy.com/media/i5RWkVZzVScmY/giphy.gif" alt="pyramid test" /></p>

<p>Cada aplicaci√≥n compleja tiene componentes internos y externos que trabajan juntos para hacer algo interesante. A diferencia de las pruebas de unidades que se centran en componentes individuales, las pruebas de integraci√≥n combinan varias partes del sistema y las prueban juntas como un grupo. Las pruebas de integraci√≥n tambi√©n pueden referirse a las pruebas en los l√≠mites de servicio de nuestra aplicaci√≥n, es decir, cuando salen a la base de datos, sistema de archivos o API externa.</p>

<p>Estas pruebas suelen ser escritas por desarrolladores, pero no tienen que ser as√≠. Por definici√≥n, las pruebas de integraci√≥n tienen un alcance mayor y tardan m√°s en ejecutarse que las pruebas unitarias. Esto significa que las fallas de la prueba requieren cierta investigaci√≥n: sabemos que uno de los componentes de nuestra prueba no funciona, pero es necesario encontrar la ubicaci√≥n exacta de la falla. Esto contrasta con las pruebas unitarias que son de menor alcance e indican exactamente d√≥nde fallaron las cosas.</p>

<p>Deber√≠amos intentar ejecutar pruebas de integraci√≥n en un entorno similar a la producci√≥n; Esto minimiza la posibilidad de que las pruebas fallen debido a diferencias en la configuraci√≥n.
Ejemplo de prueba de integraci√≥n</p>

<p>Supongamos que tenemos la siguiente funci√≥n que toma una URL y una tupla de (palabra, ocurrencias). Nuestra funci√≥n crea un registro y lo guarda en la base de datos:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">save_to_db</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">top_word</span><span class="p">):</span>
    <span class="n">record</span> <span class="o">=</span> <span class="n">TopWord</span><span class="p">()</span>
    <span class="n">record</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
    <span class="n">record</span><span class="o">.</span><span class="n">word</span> <span class="o">=</span> <span class="n">top_word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">record</span><span class="o">.</span><span class="n">num_occurrences</span> <span class="o">=</span> <span class="n">top_word</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">record</span>
</code></pre></div></div>

<p>Probamos esta funci√≥n pasando informaci√≥n conocida; la funci√≥n debe guardar la informaci√≥n que ingresamos en la base de datos. Nuestro c√≥digo de prueba extrae el registro reci√©n guardado de la base de datos y confirma que sus campos coinciden con la entrada que ingresamos.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_save_to_db</span><span class="p">():</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">"http://test_url.com"</span>
    <span class="n">most_common_word_details</span> <span class="o">=</span> <span class="p">(</span><span class="s">"Python"</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>

    <span class="n">word</span> <span class="o">=</span> <span class="n">save_to_db</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">most_common_word_details</span><span class="p">)</span>

    <span class="n">inserted_record</span> <span class="o">=</span> <span class="n">TopWord</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="nb">id</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">inserted_record</span><span class="o">.</span><span class="n">url</span> <span class="o">==</span> <span class="s">"http://test_url.com"</span>
    <span class="k">assert</span> <span class="n">inserted_record</span><span class="o">.</span><span class="n">word</span> <span class="o">==</span> <span class="s">"Python"</span>
    <span class="k">assert</span> <span class="n">inserted_record</span><span class="o">.</span><span class="n">num_occurrences</span> <span class="o">==</span> <span class="mi">42</span>

</code></pre></div></div>

<p>Observe c√≥mo este es el tipo de prueba que hacemos manualmente para confirmar que las cosas funcionan como se esperaba. Automatizar esta prueba nos evita tener que verificar repetidamente esta funcionalidad cada vez que hacemos un cambio en el c√≥digo.</p>

<h3 id="end-to-end">End-to-End</h3>

<p><img src="https://media.giphy.com/media/49zC0Bm1kbu36/giphy.gif" alt="pyramid test" /></p>

<p>Las pruebas de End to End verifican si el sistema cumple con nuestros requisitos comerciales definidos. Una prueba com√∫n es trazar una ruta a trav√©s del sistema de la misma manera que un usuario lo experimentar√≠a. Por ejemplo, podemos probar un nuevo flujo de trabajo del usuario: simular la creaci√≥n de una cuenta, ‚Äúhacer clic‚Äù en el enlace en el correo electr√≥nico de activaci√≥n, iniciar sesi√≥n por primera vez e interactuar con la ventana emergente modal de nuestra aplicaci√≥n web.</p>

<p>Podemos realizar pruebas de extremo a extremo a trav√©s de nuestra interfaz de usuario (UI) aprovechando una herramienta de automatizaci√≥n del navegador como Selenium. Esto crea una dependencia entre nuestra interfaz de usuario y nuestras pruebas, lo que hace que nuestras pruebas sean fr√°giles: un cambio en el front-end requiere que cambiemos las pruebas. Esto no es sostenible ya que nuestro front-end se volver√° est√°tico o nuestras pruebas no se ejecutar√°n.</p>

<p>Una mejor soluci√≥n es probar la capa subcut√°nea, es decir, la capa justo debajo de nuestra interfaz de usuario. Para una aplicaci√≥n web, esto ser√≠a probar la <strong>API REST</strong>, tanto enviando JSON como sacando <strong>JSON.</strong></p>

<p>Nuestras pruebas subcut√°neas son nuestros contratos con nuestro front-end; pueden ser utilizados por nuestros desarrolladores front-end como una especificaci√≥n de la <strong>API REST</strong>. Las herramientas, como <strong>swagger-meqa</strong>, que se basan en la especificaci√≥n <strong>OpenAPI</strong> pueden ayudarnos a automatizar este proceso. Tambi√©n podr√≠amos contar con herramientas completas como <strong>Postman</strong> para probar, depurar y validar nuestra API.</p>

<p>Las pruebas de extremo a extremo se consideran recuadro negro, ya que no necesitamos saber nada sobre la implementaci√≥n para realizar las pruebas. Esto tambi√©n significa que las fallas en las pruebas no proporcionan una indicaci√≥n de lo que sali√≥ mal; necesitar√≠amos usar registros para ayudarnos a rastrear el error y diagnosticar la falla del sistema.</p>

<p>vamos al codigo!</p>

<p>Aqu√≠ estamos utilizando el cliente <strong>Flask Test</strong> para ejecutar pruebas subcut√°neas en nuestra <strong>API REST</strong>. Hay muchas cosas que suceden detr√°s de escena y el resultado que recibimos <strong>(c√≥digo de estado HTTP)</strong> nos permite saber que la prueba pas√≥ o fall√≥.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_end_to_end</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>

    <span class="n">body</span> <span class="o">=</span> <span class="p">{</span><span class="s">"url"</span><span class="p">:</span> <span class="s">"https://www.python.org"</span><span class="p">}</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">"/top-word"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">body</span><span class="p">)</span>

    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="n">HTTPStatus</span><span class="o">.</span><span class="n">OK</span>

</code></pre></div></div>

<h3 id="structuring-tests">Structuring Tests</h3>

<p>Cada caso de prueba se puede separar en las siguientes fases:</p>

<ul>
  <li>configurar el sistema bajo prueba (SUT) en el entorno requerido por el caso de prueba (condiciones previas)</li>
  <li>realizando la acci√≥n que queremos probar en SUT verificar si se produjo el resultado esperado (postcondiciones)</li>
  <li>derribar SUT y devolver el medio ambiente al estado en que lo encontramos</li>
</ul>

<p>Hay dos marcos ampliamente utilizados para estructurar pruebas: Arrange-Act-Assert y Given-When-Then.
Organizar-Actuar-Afirmar (AAA)</p>

<p>El patr√≥n AAA es una abstracci√≥n para separar las diferentes partes de nuestras pruebas:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Organizar todas las condiciones previas necesarias
- Actuar sobre el SUT
- Afirmar que se cumplen nuestras condiciones posteriores
</code></pre></div></div>

<p>Vamos la codigo!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_find_top_word</span><span class="p">():</span>
    <span class="c1"># Arrange
</span>    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"bat"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">]</span>

    <span class="c1"># Act
</span>    <span class="n">result</span> <span class="o">=</span> <span class="n">find_top_word</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

    <span class="c1"># Assert
</span>    <span class="k">assert</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"foo"</span>
    <span class="k">assert</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span>

</code></pre></div></div>

<h3 id="gwt">GWT</h3>

<p>GWT proporciona una abstracci√≥n √∫til para separar las diferentes fases de nuestra prueba:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Dado un conjunto de condiciones previas
- Cuando realizamos una acci√≥n en el SUT
- Entonces nuestras condiciones posteriores deben ser las siguientes
</code></pre></div></div>

<p>GWT es ampliamente utilizado en Behavior Driven Development (BDD).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_find_top_word</span><span class="p">():</span>
    <span class="c1"># Given a list of word
</span>    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"bat"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">]</span>

    <span class="c1"># When we run the function over the list
</span>    <span class="n">result</span> <span class="o">=</span> <span class="n">find_top_word</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

    <span class="c1"># Then we should see `foo` occurring 3 times
</span>    <span class="k">assert</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"foo"</span>
    <span class="k">assert</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span>

</code></pre></div></div>

<h3 id="que-testear">Que testear!</h3>

<p><img src="https://media.giphy.com/media/7MZ0v9KynmiSA/giphy.gif" alt="pyramid test" /></p>

<p>Para probar que nuestro programa es correcto, tenemos que probarlo contra cada combinaci√≥n concebible de valores de entrada. Este tipo de prueba exhaustiva no es pr√°ctica, por lo que debemos emplear estrategias de prueba que nos permitan seleccionar casos de prueba en los que es m√°s probable que se produzcan errores.</p>

<p>Los desarrolladores experimentados pueden equilibrar la escritura de c√≥digo para resolver problemas comerciales con pruebas de escritura para garantizar la correcci√≥n y evitar la regresi√≥n. Encontrar este equilibrio y saber qu√© probar puede sentirse m√°s como un arte que como una ciencia. Afortunadamente, hay algunas reglas generales que podemos seguir para asegurarnos de que nuestras pruebas sean exhaustivas.
Requerimientos funcionales</p>

<p>Queremos asegurarnos de que se hayan implementado todos los requisitos relevantes. Nuestros casos de prueba deben ser lo suficientemente detallados para verificar los requisitos comerciales. No tiene sentido construir algo si no cumple con los criterios establecidos.
Prueba de ruta de base</p>

<p>Tenemos que probar cada declaraci√≥n al menos una vez. Si la declaraci√≥n tiene un condicional (si o mientras), tenemos que variar nuestras pruebas para asegurarnos de probar todas las ramas del condicional. Por ejemplo, si tenemos el siguiente c√≥digo:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
    <span class="c1"># statement1
</span><span class="k">elif</span> <span class="mi">18</span> <span class="o">&gt;=</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">35</span><span class="p">:</span>
    <span class="c1"># statement2
</span><span class="k">else</span><span class="p">:</span>
    <span class="c1"># statement3
</span></code></pre></div></div>

<p>Para asegurarnos de alcanzar todas las ramas del condicional anterior, necesitamos escribir las siguientes pruebas:</p>

<ol>
  <li>x &lt; 18</li>
  <li>18 &lt;= x &lt;= 35</li>
  <li>x &gt; 35</li>
</ol>

<h3 id="partici√≥n-de-equivalencia">Partici√≥n de equivalencia</h3>

<p>Se dice que dos casos de prueba que resultan en la misma salida son equivalentes. Solo requerimos uno de los casos de prueba para cubrir esa clase de errores.
An√°lisis de l√≠mites</p>

<ul>
  <li>‚ÄúHay 2 problemas dif√≠ciles en Ciencias de la Computaci√≥n: invalidaci√≥n de cach√©, nombres de cosas y errores fuera de 1‚Äù.</li>
</ul>

<p>Este es uno de los chistes m√°s antiguos de la programaci√≥n, pero hay mucha verdad detr√°s, a menudo confundimos si necesitamos un <strong>&lt; o un &lt;=</strong>. Es por eso que siempre debemos probar las condiciones de emtorno.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
    <span class="c1"># statement1
</span><span class="k">else</span><span class="p">:</span>
    <span class="c1"># statement2
</span></code></pre></div></div>

<p>Para asegurarnos de probar a fondo las condiciones de entorno del fragmento de c√≥digo anterior, deber√≠amos tener casos de prueba para <strong>x = 17, x = 18 yx = 19.</strong> Tenga en cuenta que escribir casos de prueba se vuelve m√°s complicado si nuestro l√≠mite tiene condicionales compuestos.</p>

<h3 id="clases-de-datos-incorrectos">Clases de datos incorrectos</h3>

<p>Esto se refiere a cualquiera de los siguientes casos:</p>

<ul>
  <li>Muy pocos datos (o sin datos)
    - Demasiados datos
    - Datos inv√°lidos
    - Tama√±o incorrecto de datos
    - Datos no inicializados</li>
</ul>

<h3 id="prueba-de-flujo-de-datos">Prueba de flujo de datos</h3>

<p>Se enfoca en rastrear el flujo de control del programa con un enfoque en explorar la secuencia de eventos relacionados con el estado de los objetos de datos. Por ejemplo, recibimos un error si intentamos acceder a una variable que ha sido eliminada. Podemos utilizar las pruebas de flujo de datos para obtener casos de prueba adicionales para variables que no han sido probadas por otras pruebas.</p>

<h3 id="error-adivinando">Error Adivinando</h3>

<p>La experiencia pasada proporciona informaci√≥n sobre partes de nuestra base de c√≥digo que puede conducir a errores. Mantener un registro de los errores anteriores puede mejorar la probabilidad de que no vuelva a cometer el mismo error en el futuro.
Resumen</p>

<p>Averiguar qu√© probar y hacerlo de manera eficiente es a lo que me refiero cuando digo <strong>Art of Developer Testing</strong>. La √∫nica manera de mejorar en las pruebas es escribiendo pruebas, presentando mejores estrategias de prueba y aprendiendo sobre diferentes t√©cnicas de prueba. Al igual que en el desarrollo de software, cuanto m√°s sepa sobre algo, mejor se convertir√° en eso.</p>

<p><strong>Cuando escribir pruebas</strong>
Si bien hay mucha discusi√≥n interesante sobre cu√°ndo escribir pruebas, creo que se lleva lejos del punto de prueba. No importa cuando escribes pruebas, solo importa que escribas pruebas.</p>

<p><strong>Tip</strong></p>

<p>El problema con las pruebas unitarias a menudo es que se realizan demasiadas pruebas triviales, que es solo un c√≥digo adicional que debe mantenerse ‚Ä¶ si se hace mal, es m√°s un obst√°culo que un beneficio ‚Ä¶ es por eso que decidir qu√© probar es tan importante ‚Ä¶ pensar antes de actuar.</p>

<p>y esta en es una breve introduccion
nos vemos en el siguiente post</p>

<p>Hasta pronto!</p>

:ET