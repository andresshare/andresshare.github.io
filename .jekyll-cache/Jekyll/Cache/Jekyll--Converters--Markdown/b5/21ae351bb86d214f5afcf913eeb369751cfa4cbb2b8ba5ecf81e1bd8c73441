I"}<p><img src="https://media.giphy.com/media/pX4qCZekYXTYQ/giphy.gif" alt="recursivad" /></p>

<ul>
  <li>La recursividad consiste en funciones que se llaman a s√≠ mismas, evitando el uso de bucles y otros iteradores.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span><span class="o">&lt;=</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">n</span><span class="o">*</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//other way</span>
<span class="kd">const</span> <span class="nx">U</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span> <span class="p">(</span><span class="nx">f</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nx">U</span> <span class="p">(</span><span class="nx">h</span> <span class="o">=&gt;</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">U</span> <span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">(</span><span class="nx">x</span><span class="p">)))</span>

<span class="kd">const</span> <span class="nx">factorial</span> <span class="o">=</span> <span class="nx">Y</span> <span class="p">(</span><span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">=&gt;</span>
  <span class="nx">x</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span>  <span class="nx">x</span> <span class="o">*</span> <span class="nx">f</span> <span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="nx">factorial</span> <span class="p">(</span><span class="mi">5</span><span class="p">))</span> <span class="c1">// 120</span>

</code></pre></div></div>
<p><strong>APLICACION</strong></p>

<blockquote>
  <p>El ejemplo t√≠pico ser√≠a el recorrer un √°rbol de elementos para hacer algo con todos ellos. Imag√≠nate un sistema de archivos con carpetas y subcarpetas y archivos dentro de estas carpetas, o el √°rbol de elementos (DOM) de una p√°gina web donde unos elementos incluyen a su vez otros y no sabes cu√°ntos hay en cada uno. En este tipo de situaciones la manera m√°s eficiente de hacer una funci√≥n que recorra todos los elementos es mediante recursi√≥n. Es decir, creas una funci√≥n que recorra todos los elementos hijo del nodo que le pases y que se llame a s√≠ misma para hacer lo mismo con los sub-nodos que haya. En el caso del sistema de archivos le pasar√≠as una carpeta y se llamar√≠a a s√≠ misma por cada subcarpeta que hubiese, y as√≠ sucesivamente con todas las dem√°s. Con una sola llamada inicial recorrer√° autom√°ticamente toda la estructura del sistema de archivos.</p>
</blockquote>
:ET