I" <p><img src="https://media.giphy.com/media/cFkiFMDg3iFoI/giphy.gif" alt="git " /></p>

<h2 id="configuración-básica">Configuración Básica</h2>

<p>Configurar Nombre que salen en los commits</p>
<pre><code class="language-ssh">	git config --global user.name "andresshare"
</code></pre>
<p>Configurar Email</p>
<pre><code class="language-ssh">	git config --global user.email andresshare@gmail.com
</code></pre>
<p>Marco de colores para los comando</p>
<pre><code class="language-ssh">	git config --global color.ui true
</code></pre>

<h2 id="iniciando-repositorio">Iniciando repositorio</h2>

<p>Iniciamos GIT en la carpeta donde esta el proyecto</p>
<pre><code class="language-ssh">	git init
</code></pre>
<p>Clonamos el repositorio de github o bitbucket</p>
<pre><code class="language-ssh">	git clone &lt;url&gt;
</code></pre>
<p>Añadimos todos los archivos para el commit</p>
<pre><code class="language-ssh">	git add .
</code></pre>
<p>Hacemos el primer commit</p>
<pre><code class="language-ssh">	git commit -m "Texto que identifique por que se hizo el commit"
</code></pre>
<p>subimos al repositorio</p>
<pre><code class="language-ssh">	git push origin master
</code></pre>

<h2 id="git-clone">GIT CLONE</h2>

<p>Clonamos el repositorio de github o bitbucket</p>
<pre><code class="language-ssh">	git clone &lt;url&gt;
</code></pre>
<p>Clonamos el repositorio de github o bitbucket ?????</p>
<pre><code class="language-ssh">	git clone &lt;url&gt; git-demo
</code></pre>

<h2 id="git-add">GIT ADD</h2>

<p>Añadimos todos los archivos para el commit</p>
<pre><code class="language-ssh">	git add .
</code></pre>
<p>Añadimos el archivo para el commit</p>
<pre><code class="language-ssh">	git add &lt;archivo&gt;
</code></pre>
<p>Añadimos todos los archivos para el commit omitiendo los nuevos</p>
<pre><code class="language-ssh">	git add --all 
</code></pre>
<p>Añadimos todos los archivos con la extensión especificada</p>
<pre><code class="language-ssh">	git add *.txt
</code></pre>
<p>Añadimos todos los archivos dentro de un directorio y de una extensión especifica</p>
<pre><code class="language-ssh">	git add docs/*.txt
</code></pre>
<p>Añadimos todos los archivos dentro de un directorios</p>
<pre><code class="language-ssh">	git add docs/
</code></pre>
<h2 id="git-commit">GIT COMMIT</h2>

<p>Cargar en el HEAD los cambios realizados</p>
<pre><code class="language-ssh">	git commit -m "Texto que identifique por que se hizo el commit"
</code></pre>
<p>Agregar y Cargar en el HEAD los cambios realizados</p>
<pre><code class="language-ssh">	git commit -a -m "Texto que identifique por que se hizo el commit"
</code></pre>
<p>De haber conflictos los muestra</p>
<pre><code class="language-ssh">	git commit -a 
</code></pre>
<p>Agregar al ultimo commit, este no se muestra como un nuevo commit en los logs. Se puede especificar un nuevo mensaje</p>
<pre><code class="language-ssh">	git commit --amend -m "Texto que identifique por que se hizo el commit"
</code></pre>
<h2 id="git-push">GIT PUSH</h2>

<p>Subimos al repositorio</p>
<pre><code class="language-ssh">	git push &lt;origien&gt; &lt;branch&gt;
</code></pre>
<p>Subimos un tag</p>
<pre><code class="language-ssh">	git push --tags
</code></pre>
<h2 id="git-log">GIT LOG</h2>

<p>Muestra los logs de los commits</p>
<pre><code class="language-ssh">	git log
</code></pre>
<p>Muestras los cambios en los commits</p>
<pre><code class="language-ssh">	git log --oneline --stat
</code></pre>
<p>Muestra graficos de los commits</p>
<pre><code class="language-ssh">	git log --oneline --graph
</code></pre>
<h2 id="git-diff">GIT DIFF</h2>

<p>Muestra los cambios realizados a un archivo</p>
<pre><code class="language-ssh">	git diff
	git diff --staged
</code></pre>
<h2 id="git-head">GIT HEAD</h2>

<p>Saca un archivo del commit</p>
<pre><code class="language-ssh">	git reset HEAD &lt;archivo&gt;
</code></pre>
<p>Devuelve el ultimo commit que se hizo y pone los cambios en staging</p>
<pre><code class="language-ssh">	git reset --soft HEAD^
</code></pre>
<p>Devuelve el ultimo commit y todos los cambios</p>
<pre><code class="language-ssh">	git reset --hard HEAD^
</code></pre>
<p>Devuelve los 2 ultimo commit y todos los cambios</p>
<pre><code class="language-ssh">	git reset --hard HEAD^^
</code></pre>
<p>Rollback merge/commit</p>
<pre><code class="language-ssh">	git log
	git reset --hard &lt;commit_sha&gt;
</code></pre>
<h2 id="git-remote">GIT REMOTE</h2>

<p>Agregar repositorio remoto</p>
<pre><code class="language-ssh">	git remote add origin &lt;url&gt;
</code></pre>
<p>Cambiar de remote</p>
<pre><code class="language-ssh">	git remote set-url origin &lt;url&gt;
</code></pre>
<p>Remover repositorio</p>
<pre><code class="language-ssh">	git remote rm &lt;name/origin&gt;
</code></pre>
<p>Muestra lista repositorios</p>
<pre><code class="language-ssh">	git remote -v
</code></pre>
<p>Muestra los branches remotos</p>
<pre><code class="language-ssh">	git remote show origin
</code></pre>
<p>Limpiar todos los branches eliminados</p>
<pre><code class="language-ssh">	git remote prune origin 
</code></pre>
<h2 id="git-branch">GIT BRANCH</h2>

<p>Crea un branch</p>
<pre><code class="language-ssh">	git branch &lt;nameBranch&gt;
</code></pre>
<p>Lista los branches</p>
<pre><code class="language-ssh">	git branch
</code></pre>
<p>Comando -d elimina el branch y lo une al master</p>
<pre><code class="language-ssh">	git branch -d &lt;nameBranch&gt;
</code></pre>
<p>Elimina sin preguntar</p>
<pre><code class="language-ssh">	git branch -D &lt;nameBranch&gt;
</code></pre>
<h2 id="git-tag">GIT TAG</h2>

<p>Muestra una lista de todos los tags</p>
<pre><code class="language-ssh">	git tag
</code></pre>
<p>Crea un nuevo tags</p>
<pre><code class="language-ssh">	git tag -a &lt;verison&gt; - m "esta es la versión x"
</code></pre>
<h2 id="git-rebase">GIT REBASE</h2>

<p>Los rebase se usan cuando trabajamos con branches esto hace que los branches se pongan al día con el master sin afectar al mismo</p>

<p>Une el branch actual con el mastar, esto no se puede ver como un merge</p>
<pre><code class="language-ssh">	git rebase
</code></pre>
<p>Cuando se produce un conflicto no das las siguientes opciones:</p>

<p>cuando resolvemos los conflictos –continue continua la secuencia del rebase donde se pauso</p>
<pre><code class="language-ssh">	git rebase --continue 
</code></pre>
<p>Omite el conflicto y sigue su camino</p>
<pre><code class="language-ssh">	git rebase --skip
</code></pre>
<p>Devuelve todo al principio del rebase</p>
<pre><code class="language-ssh">	git reabse --abort
</code></pre>
<p>Para hacer un rebase a un branch en especifico</p>
<pre><code class="language-ssh">	git rebase &lt;nameBranch&gt;
</code></pre>
<h2 id="otros-comandos">OTROS COMANDOS</h2>

<p>Lista un estado actual del repositorio con lista de archivos modificados o agregados</p>
<pre><code class="language-ssh">	git status
</code></pre>
<p>Quita del HEAD un archivo y le pone el estado de no trabajado</p>
<pre><code class="language-ssh">	git checkout -- &lt;file&gt;
</code></pre>
<p>Crea un branch en base a uno online</p>
<pre><code class="language-ssh">	git checkout -b newlocalbranchname origin/branch-name
</code></pre>
<p>Busca los cambios nuevos y actualiza el repositorio</p>
<pre><code class="language-ssh">	git pull origin &lt;nameBranch&gt;
</code></pre>
<p>Cambiar de branch</p>
<pre><code class="language-ssh">	git checkout &lt;nameBranch/tagname&gt;
</code></pre>
<p>Une el branch actual con el especificado</p>
<pre><code class="language-ssh">	git merge &lt;nameBranch&gt;
</code></pre>
<p>Verifica cambios en el repositorio online con el local</p>
<pre><code class="language-ssh">	git fetch
</code></pre>
<p>Borrar un archivo del repositorio</p>
<pre><code class="language-ssh">	git rm &lt;archivo&gt; 
</code></pre>

<h2 id="fork">Fork</h2>

<p>Descargar remote de un fork</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	git remote add upstream &lt;url&gt;
</code></pre></div></div>

<p>Merge con master de un fork</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	git fetch upstream
	git merge upstream/master
</code></pre></div></div>
:ET