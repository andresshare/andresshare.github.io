I"ôL<p><img src="https://media.giphy.com/media/40DRc0W00UbgQ/giphy.gif" alt="OOP" /></p>

<p>Programacion orientada a objetos] Los programas son considerados como una coleccion de objetos.
Donde el <strong>objeto</strong> no es mas que una instancia de una clase.</p>

<h3 id="listado-de-conceptos-basicos-de-oop">Listado de conceptos basicos de OOP</h3>

<ul>
  <li>Abstraccion</li>
  <li>Encapsulacion</li>
  <li>Herencia</li>
  <li>Polimorfismo</li>
</ul>

<p>Veamos un poco estos conceptos aplicados al lenguaje Ruby</p>

<h4 id="casi-todo-es-objeto">Casi todo es objeto</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># a es un objeto </span>
  <span class="c1"># a.object_id da el identificador</span>
  <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>

  <span class="c1"># igualmente b es tambi√©n objeto</span>
  <span class="n">b</span> <span class="o">=</span> <span class="s2">"Hoola !"</span>

</code></pre></div></div>

<p>Las matrices son objeto, la clase es objeto, los m√≥dulos son objeto, el rango tambi√©n es objeto, los bloques de c√≥digo pueden ser objeto, nada es tambi√©n objeto que representa la nada y casi todo es objeto en rub√≠.</p>

<h3 id="clases">Clases</h3>

<p>La sintaxis para escribir la clase en ruby ‚Äã‚Äães sencilla, solo debe escribir la palabra clave <strong>class</strong> y <strong>class name</strong>. El m√©todo dentro de la clase es peque√±o y la sintaxis de may√∫sculas y min√∫sculas es m√°s preferida. La variable de instancia de clase en ruby ‚Äã‚Äãse puede iniciar con el <strong>s√≠mbolo @</strong>.</p>

<p>E <strong>initialize</strong> es la funci√≥n especial de la clase que se llama autom√°ticamente cuando se crea el objeto. Para crear el Objeto de la clase podemos usar la sintaxis <strong>ClassName.new.</strong> Uno de los ejemplos simples es el siguiente.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'date'</span>

<span class="k">class</span> <span class="nc">User</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">date_of_birth</span><span class="p">)</span>
    <span class="n">days_since_birth</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span> <span class="o">-</span> <span class="no">Date</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">date_of_birth</span><span class="p">)</span>
    <span class="vi">@age</span> <span class="o">=</span> <span class="n">days_since_birth</span> <span class="o">/</span> <span class="mi">365</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">is_kid?</span>
    <span class="vi">@age</span> <span class="o">&lt;=</span> <span class="mi">18</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">john</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"2006-02-12"</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">john</span><span class="p">.</span><span class="nf">is_kid?</span> <span class="c1"># Returns False</span>
</code></pre></div></div>

<p>El m√©todo de inicializaci√≥n se llama autom√°ticamente cuando se crea el objeto, y el fragmento de c√≥digo anterior se trata de la creaci√≥n del objeto de la clase Usuario. La edad es la variable de clase.</p>

<h3 id="metodos">Metodos</h3>

<p>Los m√©todos son bastante fundamentales para Ruby, el m√©todo solo comienza por el s√≠mbolo def, el nombre del m√©todo sin ninguno o m√°s par√°metros</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">another_method</span><span class="p">(</span><span class="n">first_arg</span><span class="p">,</span> <span class="n">last_arg</span><span class="p">)</span>
        <span class="s2">"You passed in </span><span class="si">#{</span><span class="n">first_arg</span><span class="si">}</span><span class="s2"> and </span><span class="si">#{</span><span class="n">second_arg</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">end</span>
</code></pre></div></div>

<p>Es posible crear el nombre del m√©todo con may√∫scula, pero no lo haga. Por lo tanto, escriba siempre el m√©todo en min√∫scula, este √∫ltimo conectado por el gui√≥n bajo.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ThisIsPossible</span>
        <span class="c1"># Please do not do this</span>
<span class="k">end</span>

</code></pre></div></div>

<p>Los m√©todos que devuelven verdadero o falso (valor booleano) siempre terminan con un signo de interrogaci√≥n.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">is_not_boy?</span>
      <span class="vi">@gender</span> <span class="o">!=</span> <span class="s1">'boy'</span>
    <span class="k">end</span>
</code></pre></div></div>
<p>Signo de exclamaci√≥n ! al final del m√©todo en ruby ‚Äã‚Äãsignifica lookout, eso significa que el valor de referencia original de la propiedad tambi√©n se cambia, as√≠ que tenga en cuenta. por ejemplo</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">message</span> <span class="o">=</span> <span class="s2">"Hello World"</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">downcase!</span> <span class="c1"># This change message value to 'hello world'</span>
</code></pre></div></div>

<p>Tambi√©n podemos definir el argumento opcional en ruby, el argumento opcional siempre debe ser el √∫ltimo argumento en el m√©todo.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">informal</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">informal</span>
        <span class="s2">"hi </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">end</span>
      <span class="k">else</span>
        <span class="s2">"Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">end</span>      
    <span class="k">end</span>
</code></pre></div></div>
<p>Digamos que hay tres argumentos y dos de los argumentos son opcionales. no necesitamos enviar el valor predeterminado, pero si el tercer argumento es diferente del valor predeterminado del argumento, entonces deber√≠amos pasar los tres argumentos durante la llamada al m√©todo, ¬øverdad? dejemos claro del ejemplo</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">informal</span> <span class="o">=</span> <span class="kp">false</span><span class="p">,</span> <span class="n">shout</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
      <span class="n">greeting</span> <span class="o">=</span> <span class="k">if</span> <span class="n">informal</span> <span class="k">then</span> <span class="s2">"hi"</span> <span class="k">else</span> <span class="s2">"hello"</span> <span class="k">end</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">if</span> <span class="n">shout</span>
        <span class="n">message</span><span class="p">.</span><span class="nf">upcase</span>
      <span class="k">else</span>
        <span class="n">message</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">greet</span><span class="p">(</span><span class="s2">"John"</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</code></pre></div></div>

<p>¬°Para solucionar esto, podemos hacerlo as√≠! Esta es una forma mucho m√°s clara de pasar los argumentos en m√©todos ruby.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="ss">informal: </span><span class="kp">false</span><span class="p">,</span> <span class="ss">shout: </span><span class="kp">false</span><span class="p">)</span>
      <span class="n">greeting</span> <span class="o">=</span> <span class="k">if</span> <span class="n">informal</span> <span class="k">then</span> <span class="s2">"hi"</span> <span class="k">else</span> <span class="s2">"hello"</span> <span class="k">end</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">if</span> <span class="n">shout</span>
        <span class="n">message</span><span class="p">.</span><span class="nf">upcase</span>
      <span class="k">else</span>
        <span class="n">message</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">greet</span><span class="p">(</span><span class="s2">"John"</span><span class="p">,</span> <span class="ss">shout: </span><span class="kp">true</span><span class="p">)</span>
</code></pre></div></div>

<p>Normalmente no necesitamos devolver el valor en los m√©todos, el √∫ltimo valor del m√©todo es devuelto autom√°ticamente por el m√©todo. Pero en alg√∫n momento deber√≠amos devolver si hay alguna condici√≥n, entonces podemos devolver el valor utilizando la palabra clave return como esta.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span>
      <span class="k">def</span> <span class="nf">odd_or_even</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">unless</span> <span class="n">num</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:odd?</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">num</span><span class="p">.</span><span class="nf">odd?</span> <span class="k">then</span>  <span class="s2">"odd"</span> <span class="k">else</span> <span class="s2">"even"</span> <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="no">MyClass</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">odd_or_even</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="herencia">Herencia</h3>

<p>Ruby solo admite herencia √∫nica, lo que significa que cada clase en ruby ‚Äã‚Äãtiene exactamente una superclase. Podemos especificar una superclase escribiendo el signo ‚Äò&lt;‚Äô seguido del nombre de la superclase. La clase hereda los m√©todos de la superclase.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span>
      <span class="n">attr_reder</span> <span class="ss">:name</span>
      <span class="k">def</span> <span class="nf">initilize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
        <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
      <span class="k">end</span>    
    <span class="k">end</span>

    <span class="c1"># child class of User class</span>
    <span class="k">class</span> <span class="nc">Admin</span> <span class="o">&lt;</span> <span class="no">User</span>
      <span class="k">def</span> <span class="nf">is_admin</span>
        <span class="kp">true</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">user</span> <span class="o">=</span> <span class="no">Admin</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Madhu Sudhan"</span><span class="p">)</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">name</span> <span class="c1"># will results 'Madhu Sudhan'</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">is_admin?</span> <span class="c1"># will return true</span>
</code></pre></div></div>

<p>Aqu√≠ est√° el ejemplo de c√≥mo una clase contiene exactamente una superclase. Vea el siguiente ejemplo</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Admin</span><span class="p">.</span><span class="nf">superclass</span>
    <span class="o">=&gt;</span> <span class="no">User</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">superclass</span>
    <span class="o">=&gt;</span> <span class="no">Object</span>
    <span class="no">Object</span><span class="p">.</span><span class="nf">superclass</span>
    <span class="o">=&gt;</span> <span class="no">BasicObject</span>
    <span class="no">BasicObject</span><span class="p">.</span><span class="nf">superclass</span>
    <span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<h3 id="modulos">Modulos</h3>

<p>Los m√≥dulos en ruby ‚Äã‚Äãson realmente solo una colecci√≥n de m√©todos y la clase tambi√©n es un tipo especial de m√≥dulo. Podemos definir m√≥dulos de la misma manera que una clase.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'date'</span>

<span class="k">module</span> <span class="nn">Employee</span>
  <span class="nb">attr_accessor</span> <span class="ss">:start_date</span>

  <span class="k">def</span> <span class="nf">employment_length</span>
    <span class="n">days</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span> <span class="o">-</span> <span class="n">start_date</span><span class="p">.</span><span class="nf">to_date</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">days</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2"> days"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">User</span>
  <span class="kp">include</span> <span class="no">Employee</span>
<span class="k">end</span>

<span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
<span class="n">u</span><span class="p">.</span><span class="nf">start_date</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span> <span class="o">-</span> <span class="mi">365</span>
<span class="nb">puts</span> <span class="n">u</span><span class="p">.</span><span class="nf">employment_length</span>

</code></pre></div></div>

<p>Extender es otra forma de usar el m√≥dulo y es mucho m√°s interesante, antes de usar la palabra clave include que el m√≥dulo define en la clase, pero tambi√©n podemos usar la palabra clave extender para decirle al m√©todo una sola instancia de clase,</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'date'</span>

<span class="k">module</span> <span class="nn">Employee</span>
  <span class="nb">attr_accessor</span> <span class="ss">:start_date</span>

  <span class="k">def</span> <span class="nf">employment_length</span>
    <span class="n">days</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span> <span class="o">-</span> <span class="n">start_date</span><span class="p">.</span><span class="nf">to_date</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">days</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2"> days"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">User</span>
<span class="k">end</span>

<span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
<span class="n">u</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="no">Employee</span><span class="p">)</span>
<span class="n">u</span><span class="p">.</span><span class="nf">start_date</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span> <span class="o">-</span> <span class="mi">365</span>
<span class="nb">puts</span> <span class="n">u</span><span class="p">.</span><span class="nf">employment_length</span>
</code></pre></div></div>

<h3 id="constantes">Constantes</h3>

<p>Las constantes en rub√≠ son muy similares a las constantes en cualquier otro idioma, violan la mutaci√≥n del valor. Parece variable pero comienza con may√∫scula. Es una convenci√≥n que toda la letra de la constante debe estar en may√∫scula.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.14</span> <span class="c1"># is good</span>

    <span class="no">Pi</span> <span class="o">=</span> <span class="mf">3.14</span> <span class="c1"># is possible but not do it</span>
</code></pre></div></div>

<p>Usando las constantes en clase y M√≥dulos se puede acceder de esta manera</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Geometry</span>
      <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
    <span class="k">end</span>

    <span class="k">class</span> <span class="nc">Circle</span>
      <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.142</span>
    <span class="k">end</span>

    <span class="nb">puts</span> <span class="no">Geometry</span><span class="o">::</span><span class="no">PI</span> <span class="o">==</span> <span class="no">Circle</span><span class="o">::</span><span class="no">PI</span> <span class="c1"># false</span>
</code></pre></div></div>

<p>Es realmente interesante aprender el lenguaje de programaci√≥n ruby ‚Äã‚Äãy tambi√©n es f√°cil.</p>
:ET